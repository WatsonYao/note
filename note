官方样例代码
https://github.com/googlesamples

官方性能优化
1. view的背景颜色不要重复设置

productFlavors{
	wandoujia{}
	baidu{}
	qihu360{}
	uc{}

	productFlavors.all {
		flavor -> flavor.manifestPlaceholders = [ XX_YY_ZZ:name]
	}
}

// MVP
View 中应该只有UI逻辑，捕捉用户输入以及视图的渲染。
这样将其它复杂的逻辑抽离出来放到Presenter中去，这样就出现了MVP。
降低耦合度，模块化，更方便维护。
降低耦合度，便于维护和测试，也增加了复用。
Presenter通常是通过定义好的接口与View进行交互，

MVP模式里通常包含4个要素
-1- view
	负责绘制UI元素，与用户进行交互(A或F)
-2- View interface
	View需要实现的接口，View通过View interface 与 Presenter进行交互，降低耦合，方便进行单元测试
-3- Model
	负责业务Bean的操作
-4- Presenter
	作为View和Model交互的纽带，承载了大部分的复杂逻辑

优点：
1. model与view完全分离，它们通过接口进行交互，便于维护和测试
2. 可以更高效地使用model，因为所有对model的操作都在Presenter内部
3. 我们可以将一个Presenter用于多个视图，只需要在presenter中为不同的view定义view interface即可，
	具体的view实现自己的view interface，即可使用presenter中的model操作等。


公司弊病：
产品出了问题，相互推卸责任。
内部协调非常困难。
设计适配员工能力的组织管理方式，或者去对员工培养，应该通过疏而不是堵的方式解决问题

搭建平台激发员工，
建立针对组织级的健康审视，一种对管理和氛围的促进方法，而不是现在对一些容易被欺骗的指标的审视

企业的发展和员工的发展统一起来
特别强调所谓的预期管理，即通过投资员工的未来，公司获得自己的未来

权利和责任割裂的业务设计
缺乏一个真正的责权一体的组织，
缺乏一个能平衡前方和后方的真正责任人

为了避免类似的组织累赘，采用事业部形式。
把组织分成若干个小组织，让小组织自己承担盈亏
通过完整团队的运作，进行短链条的管理和交付。

核心价值观要有反馈机制，要有利益牵引。

过分迷信洋人，一方面说明心里没底，或者说对组织什么都不懂，只能生搬硬套。


// mvp
展现数据的过程 是什么样子的？
显示角度来说：
	显示加载过程
	隐藏加载过程
	显示数据
	隐藏数据
	显示错误
	隐藏错误


// 思维方式
优秀的求职者通常都附上了他们的思考过程。
手绘稿、图解、利弊、 阻碍、权衡、解决方案，以及阐明交互和动效的原型。
在真实参数的考量下，描述产品的模块如何移动和变化，它们的动态效果又如何呈现。
从广泛的构思到像素级的细节，设计师应该始终思考公司的使命、愿景和产品架构。

// h5
我在根元素<html>中定义了一个基本字体大小为62.5%
（也就是10px。设置这个值主要方便计算，如果没有设置，将是以“16px”为基准）。
从上面的计算结果，我们使用“rem”就像使用“px”一样的方便，而且同时解决了“px”和“em”两者不同之处。
html {font-size: 62.5%;/*10 ÷ 16 × 100% = 62.5%*/}
body {font-size: 1.4rem;/*1.4 × 10px = 14px */}
h1 { font-size: 2.4rem;/*2.4 × 10px = 24px*/}